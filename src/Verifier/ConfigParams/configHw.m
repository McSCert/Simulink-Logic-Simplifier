function [noncompatible, all_params] = configHw(sys1, sys2)
% CONFIGHW Check the model configuration parameters that deal with hardware implementation.
%
%   Inputs:
%       sys1    Fullpath of first model to verify.
%       sys2    Fullpath of second model to verify.
%
%   Outputs:
%       params  Names of parameters that differ between the two models.

    sys = {bdroot(sys1), bdroot(sys2)};
    
    %% Parameters
    general = { ...
        'HardwareBoard', ...
        'ProdHWDeviceType', ...
        'UnderspecifiedInitializationDetection'};
    
    % Device details: Number of bits
    numBits = { ...
        'ProdBitPerChar', ...
        'ProdBitPerLong', ...
        'ProdBitPerDouble', ...
        'ProdBitPerSizeT', ...
        'ProdBitPerShort', ...
        'ProdBitPerLongLong', ...
        'ProdWordSize', ...
        'ProdBitPerPtrDiffT', ...
        'ProdBitPerInt', ...
        'ProdBitPerFloat', ...
        'ProdBitPerPointer'};
    
    % Device details: Largest atomic size
    atomicSize = { ...
        'ProdLargestAtomicInteger', ...
        'ProdLargestAtomicFloat'};
    
    % Device details: Other
    other = {
        'ProdEndianess', ...
        'ProdIntDivRoundTo', ...
        'ProdShiftRightIntArith', ...
        'ProdLongLongMode'};
    
    % Advanced parameters: General
    adv_general = { ...
        'ProdEqTarget', ...
        'TargetHWDeviceType'};
    
    % Advanced parameters: Number of bits
    adv_numBits = {
        'TargetBitPerChar', ...
        'TargetBitPerLong', ...
        'TargetBitPerDouble', ...
        'TargetBitPerSizeT', ...
        'TargetBitPerShort', ...
        'TargetBitPerLongLong', ...
        'TargetWordSize', ...
        'TargetBitPerPtrDiffT', ...
        'TargetBitPerInt', ...
        'TargetBitPerFloat', ...
        'TargetBitPerPointer'};
    
    % Advanced parameters: Largest atomic size
    adv_atomicSize = { ...
        'TargetLargestAtomicInteger', ...
        'TargetLargestAtomicFloat'};
    
    % Advanced parameters: Other
    adv_other = { ...
        'TargetEndianess', ...
        'TargetIntDivRoundTo', ...
        'TargetShiftRightIntArith', ...
        'TargetLongLongMode', ...
        'TargetPreprocMaxBitsSint', ...
        'TargetPreprocMaxBitsUint'};
    
    % Advanced parameters: Coder features
    coder = { ...
        'UseSimulinkCoderFeatures', ...
        'UseEmbeddedCoderFeatures'};
    
	all_params = [general, numBits, atomicSize, other, adv_general, adv_numBits, adv_atomicSize, adv_other, coder];

    %% Check params of both systems
    noncompatible = {};
    for i = 1:length(all_params)
        diff = false;
        try
            p = get_param(sys, all_params{i});

            if ischar(p{1}) && ischar(p{2})
                if ~strcmp(p{1}, p{2})
                    diff = true;
                end
            elseif isnumeric(p{1}) && isnumeric(p{2})
                if p{1} ~= p{2}
                    diff = true;
                end
            end

            if diff
                noncompatible{end+1} = all_params{i};
            end
        catch ME
            if ~strcmpi(ME.identifier, 'Simulink:Commands:GetParamInvalidFirstArgument')
                rethrow(ME)
            end
        end
    end
end