function [noncompatible, all_params] = configDiagnostics_DataValidity(sys1, sys2)
% CONFIGDIAGNOSTICS_DATAVALIDITY Check the model configuration parameters that deal 
%   with diagnostics for data validity.
%
%   Inputs:
%       sys1    Fullpath of first model to verify.
%       sys2    Fullpath of second model to verify.
%
%   Outputs:
%       params  Names of parameters that differ between the two models.

    sys = {bdroot(sys1), bdroot(sys2)};
    
    %% Parameters
    % Solver
    signals = { ...
        'SignalResolutionControl', ...
        'CheckMatrixSingularityMsg', ...
        'UnderSpecifiedDataTypeMsg', ...
        'SignalInfNanChecking', ...
        'RTPrefix', ...
        'IntegerOverflowMsg', ...
        'IntegerSaturationMsg', ...
        'UnderSpecifiedDimensionMsg', ...
        'SignalRangeChecking', ...
        'StringTruncationChecking'};
    
    % Solver: Advanced params
    parameters = { ...
        'ParameterDowncastMsg', ...
        'ParameterUnderflowMsg', ...
        'ParameterTunabilityLossMsg', ...
        'ParameterOverflowMsg', ...
        'ParameterPrecisionLossMsg'};
    
    datastore = { ...
        'ReadBeforeWriteMsg', ...
        'WriteAfterReadMsg', ...
        'WriteAfterWriteMsg', ...
        'MultiTaskDSMMsg', ...
        'UniqueDataStoreMsg'};
    
    adv = { ...
        'MergeDetectMultiDrivingBlocksExec', ...
        'UnderspecifiedInitializationDetection', ...
        'ArrayBoundsChecking', ...
        'AssertControl'};       
    
	all_params = [signals, parameters, datastore, adv];

    %% Check params of both systems
    noncompatible = {};
    for i = 1:length(all_params)
        diff = false;
        try
            p = get_param(sys, all_params{i});

            if ischar(p{1}) && ischar(p{2})
                if ~strcmp(p{1}, p{2})
                    diff = true;
                end
            elseif isnumeric(p{1}) && isnumeric(p{2})
                if p{1} ~= p{2}
                    diff = true;
                end
            end

            if diff
                noncompatible{end+1} = all_params{i};
            end
        catch ME
            if ~strcmpi(ME.identifier, 'Simulink:Commands:GetParamInvalidFirstArgument')
                rethrow(ME)
            end
        end
    end
end